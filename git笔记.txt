=======git=================================================
1、查看配置参数
$ git  config -l
------安装---------------------------------------------------------------
下载地址：https://git-scm.com/downloads
在Windows上安装Git：可以从Git官网直接下载安装程序，（网速慢的同学请移步https://pan.baidu.com/s/1kU5OCOB#list/path=%2Fpub%2Fgit），然后按默认选项安装即可。
安装完成后，在开始菜单里找到“Git”->“Git Bash”，蹦出一个类似命令行窗口的东西，就说明Git安装成功！
在linux redhat上安装：# yum -y install git 就可以直接完成Git的安装.
2、配置
$ git config --global user.name "Your Name"
$ git config --global user.email "email@example.com"

------初始化仓库---------------------------------------------------------
$ mkdir learngit
3、初始化一个Git仓库
$ git init

------文件提交-----------------------------------------------------------
$ vim readme.txt
添加文件到Git仓库，分两步
4、把文件添加到仓库
$ git add readme.txt
5、把文件提交到仓库
$ git commit -m "wrote a readme file"

------版本回退-----------------------------------------------------------
6、可以查看提交历史，以便确定要回退到哪个版本。
$ git log
$ git log --pretty=oneline
fb2752b9bae41907a023fdebd00de0ea2c20f643 (HEAD -> master) append GPL
7b8414feb60e43947698d2b72184185332a2842c add distributed
c8de78a6d2b7626a0432af4f6341d206f3a1b6f7 worte a readme file
7、上一个版本:HEAD^，上上一个版本:HEAD^^  往上100个版本:HEAD~100
$ git reset --hard HEAD^
8、回到某个版本 --hard commit id
$ git reset --hard fb2752
9、用git reflog查看命令历史，以便确定要回到未来的哪个版本
$ git reflog
fb2752b (HEAD -> master) HEAD@{0}: reset: moving to fb2752
7b8414f HEAD@{1}: reset: moving to HEAD^
fb2752b (HEAD -> master) HEAD@{2}: commit: append GPL
7b8414f HEAD@{3}: commit: add distributed
c8de78a HEAD@{4}: commit (initial): worte a readme file

------工作区与暂存区--------------------------------------------------------
工作区（Working Directory）：在电脑里能看到的目录，比learngit文件夹。
版本库（Repository）：工作区隐藏目录.git。
Git的版本库里存了很多东西，其中最重要的就是称为stage（或者叫index）的暂存区。

------管理修改--------------------------------------------------------------
10、查看状态
$ git status
11、查看工作区和版本库里面最新版本的区别
$ git diff HEAD -- readme.txt

------撤销修改--------------------------------------------------------------
12、让文件回到最近一次git commit或git add时的状态。--很重要，没有--，就变成了“切换到另一个分支”的命令。
$ git  checkout -- readme.txt
readme.txt文件在工作区的修改全部撤销：
一种是readme.txt自修改后还没有被放到暂存区，现在，撤销修改就回到和版本库一模一样的状态；
一种是readme.txt已经添加到暂存区后，又作了修改，现在，撤销修改就回到添加到暂存区后的状态。
13、git reset命令既可以回退版本，也可以把暂存区的修改回退到工作区。当我们用HEAD时，表示最新的版本。
$ git reset HEAD readme.txt

------删除文件---------------------------------------------------------------
git 删除本身也是一种修改。
14、
$ rm test.txt
$ git rm test.txt

------添加远程仓库-------------------------------------------------------------
登陆GitHub(gaoyuliang123/*****3*)，然后创建一个新的仓库，在Repository name填入learngit，其他保持默认设置，点击“Create repository”按钮，就成功地创建了一个新的Git仓库。
可以从这个仓库克隆出新的仓库，也可以把一个已有的本地仓库与之关联，然后，把本地仓库的内容推送到GitHub仓库。
15、关联远程仓库，远程库的名字就是origin，这是Git默认的叫法，也可以改成别的。
$ git remote add origin https://github.com/gaoyuliang123/learngit.git
删除关联的远仓库
$ git remote rm origin
16、把本地库的所有内容推送到远程库上，由于远程库是空的，我们第一次推送master分支时，加上了-u参数，Git不但会把本地的master分支内容推送的远程新的master分支，还会把本地的master分支和远程的master分支关联起来，在以后的推送或者拉取时就可以简化命令。
$ git push -u origin master

------从远程库克隆-------------------------------------------------------------
17、Git支持多种协议，默认的git://使用ssh，但也可以使用https等其他协议。
使用https除了速度慢以外，还有个最大的麻烦是每次推送都必须输入口令，但是在某些只开放http端口的公司内部就无法使用ssh协议而只能用https。
$ git clone https://github.com/gaoyuliang123/gitskills.git
$ git clone git@github.com:gaoyuliang123/gitskills.git

------github-设置SSH Key-------------------------------------------------------
1、查看本机是否有了ssh key 密钥，有了就备份
$ cd ~/.ssh

2、生产密钥
$ ssh-keygen -t rsa -C "your email"
直接回车，之后会让你输入github的账号密码，会出现如图所示结果，跟着上面所指示的路径，在你的电脑中找到该文件，id_rsa文件即是你的私有密钥，id_rsa.pub是共开密钥。
3、打开你的id_rsa.pub文件，复制下里面的内容，然后登录进去你的github
4、点击settings进去，找到左侧的SSH Keys,在点击Add SSH Key，在title处填入任意的标识，在Key部分里面添加刚才复制的id_rsa.pub文件里的内容，点击添加即可。
5、测试
$ ssh -T git@github.com

------分支管理----------------------------------------------------------------
master指向提交的
HEAD指向当前分支
1、创建分支并切换到dev分支
$ git branch -b dev
相当于下面两条命令：
$ git branch dev
$ git checkout dev
2、查看当前分支 
$ git branch
* dev
  master
3、合并某分支到当前分支
$ git checkout master
$ git merge dev
Updating fabcb81..08acb5f
Fast-forward          ----"快进模式"，也就是直接把master指向dev的当前提交   
 README.md  | 2 ++
 readme.txt | 1 +
 2 files changed, 3 insertions(+)
 create mode 100644 readme.txt
4、删除分支
$ git branch -d dev
5、冲突文件
$ cat readme.txt
<<<<<<< HEAD
Creating a new branch is quick & simple.
=======
Creating a new branch is quick AND simple.
>>>>>>> featrue1
6、用带参数的git log也可以看到分支的合并情况
$ git log --graph --pretty=oneline --abbrev-commit
*   b488104 (HEAD -> master) conflict fixed
|\
| * d904db5 (featrue1) AND simple
* | ef8e411 & simple
|/
* 08acb5f branch test
* c694fcf branch test
* fabcb81 (origin/master, origin/HEAD) Initial commit
7、--no-ff参数，表示禁用Fast forward。合并要创建一个新的commit，这样，从分支历史上就可以看出分支信息。加上-m参数，把commit描述写进去。
$ git merge --no-ff -m "merge with --no-ff" dev
8、分支策略 
首先，master分支应该是非常稳定的，也就是仅用来发布新版本，平时不能在上面干活；
那在哪干活呢？干活都在dev分支上，也就是说，dev分支是不稳定的，到某个时候，比如1.0版本发布时，再把dev分支合并到master上，在master分支发布1.0版本；
你和你的小伙伴们每个人都在dev分支上干活，每个人都有自己的分支，时不时地往dev分支上合并就可以了。
9、bug分支
$ git stash
$ git stash list
恢复后,stash内容并不删除,你需要用git stash drop来删除
$ git stash apply stash@{0}
$ git stash drop
恢复的同时把stash内容也删了
$ git stash pop
10、要丢弃一个没有被合并过的分支，可以通过git branch -D <name>强行删除。
$ git branch -D 分支
11、多人协助
查看远程库的信息
$ git origin
origin
显示更详细的信息
$ git remote -v 
origin  git@github.com:gaoyuliang123/gitskills (fetch)
origin  git@github.com:gaoyuliang123/gitskills (push)
推送分支
$ git push origin master
$ gtt push origin dev

------标签管理------------------------------------------------------------
1、首先切换到需要打标签的分支上 
$ git tag v1.0
2、查看所有标签
$ git tag 
3、
$ git tag v0.9 ef8e411
4、 
$ git show v0.9
5、用-a指定标签名，-m指定说明文字
$ git tag -a v0.8 -m "v0.8 realsed" d904db5
6、可以通过-s用私钥签名一个标签
$ git tag -s v0.2 -m "signed version 0.2 released" fec145a
7、删除标签
$ git tag -d v0.2
8、推送某个标签到远程
$ git tag push origin v1.0
9、一次性推送全部尚未推送到远程的本地标签 
$ git tag push origin --tags
10、如果标签已经推送到远程,要删除远程标签就麻烦一点,先从本地删除,然后,从远程删除。删除命令也是push。
$ git tag -d v0.9
$ git tag push origin :refs/tags/v0.9

------github和码云------------------------------------------------------

------自定义git---------------------------------------------------------
1、忽略特殊文件 
在Git工作区的根目录下创建一个特殊的.gitignore文件，然后把要忽略的文件名填进去，Git就会自动忽略这些文件。
不需要从头写.gitignore文件，GitHub已经为我们准备了各种配置文件，只需要组合一下就可以使用了。所有配置文件可以直接在线浏览：https://github.com/github/gitignore。
.gitignore写得有问题，需要找出来到底哪个规则写错了，可以用git check-ignore命令检查。
.gitignore文件本身要放到版本库里，并且可以对.gitignore做版本管理！
2、配置别名
$ git config --global alias.st status 
$ git config --global alias.lg "log --color --graph --pretty=format:'%Cred%h%Creset -%C(yellow)%d%Creset %s %Cgreen(%cr) %C(bold blue)<%an>%Creset' --abbrev-commit"

------搭建Git服务器-----------------------------------------------------




